from collections import defaultdict
from typing import List


class DSU:
    def __init__(self, dataList):
        self.parent = {}
        self.size = {}
        self.setsCount = len(dataList)

        for x in dataList:
            self.parent[x] = x
            self.size[x] = 1

    def isExit(self, x):
        return x in self.parent

    def add(self, x):
        self.parent[x] = x
        self.size[x] = 1
        self.setsCount += 1

    def find(self, x):
        while x != self.parent[x]:
            self.parent[x] = self.parent[self.parent[x]]
            x = self.parent[x]
        return x

    def union(self, x, y):
        px = self.find(x)
        py = self.find(y)
        if px != py:
            sx = self.size[px]
            sy = self.size[py]
            if sx < sy:
                px, py = py, px
            self.parent[py] = px
            self.size[px] += self.size[py]
            self.setsCount -= 1

    def isConnected(self, x, y):
        return self.find(x) == self.find(y)

    def getSize(self, x):
        return self.size[self.find(x)]


class Solution:

    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        buc = set(initial)
        n = len(graph)
        dsu = DSU(range(n))
        for i in range(n):
            if i not in buc:
                for j in range(n):
                    if i != j and graph[i][j] == 1 and j not in buc:
                        dsu.union(i, j)

        count = [0] * n
        infects = defaultdict(set)
        for i in initial:
            for index, j in enumerate(graph[i]):
                if j == 1 and index not in buc:
                    k = dsu.find(index)
                    infects[i].add(k)
            for k in infects[i]:
                count[k] += 1

        res, score = initial[0], 0
        for i in initial:
            t = 0
            for j in infects[i]:
                if count[j] == 1:
                    t += dsu.getSize(j)
            if t > score or (t >= score and i < res):
                res = i
                score = t
        return res


if __name__ == '__main__':
    s = Solution()
    print(s.minMalwareSpread(graph=[[1, 1, 0, 0], [1, 1, 1, 0], [0, 1, 1, 1], [0, 0, 1, 1]], initial=[0, 1]))
    print(s.minMalwareSpread([[1, 0, 0, 0, 0, 0, 0, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 1, 0, 0, 0],
                              [0, 1, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 1, 0, 1, 1, 0, 0, 0],
                              [0, 0, 0, 1, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1]]
                             , [3, 7]))
    print(s.minMalwareSpread([[1, 0, 0, 1], [0, 1, 1, 0], [0, 1, 1, 0], [1, 0, 0, 1]]
                             , [3, 1]))
    print(s.minMalwareSpread(
        [[1, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0],
         [0, 0, 0, 0, 1, 0, 0],
         [1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1]]
        , [4]))
