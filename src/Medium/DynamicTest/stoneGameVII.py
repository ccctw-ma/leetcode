import time, re
from typing import List, Tuple, Union, Optional
from heapq import heappop, heappush, heapify, heappushpop, heapreplace
from collections import defaultdict, deque, Counter
from itertools import accumulate, permutations, combinations, product, compress, zip_longest, pairwise, groupby
from math import perm, comb, gcd, lcm, inf, ceil, floor, factorial, dist, sqrt
from functools import cache, lru_cache, reduce
from sortedcontainers import SortedList, SortedSet, SortedDict
from bisect import bisect_left, bisect_right, insort, insort_left, insort_right


class Solution:
    # maximus recursion
    def stoneGameVII2(self, stones: List[int]) -> int:

        @cache
        def c(i, j):
            if i > j:
                return 0
            if i == j:
                return stones[i]
            else:
                return stones[i] + stones[j] + c(i + 1, j - 1)

        @cache
        def f(i, j):
            if i + 1 == j:
                return max(stones[i], stones[i + 1]), 0
            else:
                la, lb = f(i + 1, j)
                lc = c(i + 1, j)

                ra, rb = f(i, j - 1)
                rc = c(i, j - 1)
                if lb + lc - la >= rb + rc - ra:
                    return lc + lb, la
                else:
                    return rc + rb, ra

        n = len(stones)
        a, b = f(0, n - 1)
        return a - b

    def stoneGameVII(self, stones: List[int]) -> int:

        ps = [0] + list(accumulate(stones))
        n = len(stones)
        dp = [[[0, 0] for _ in range(n)] for _ in range(n)]
        for i in range(n - 1):
            a, b = stones[i], stones[i + 1]
            dp[i][i + 1][0] = max(a, b)
        for i in range(n - 3, - 1, -1):
            for j in range(i + 2, n):
                la, lb = dp[i + 1][j]
                lc = ps[j + 1] - ps[i + 1]

                ra, rb = dp[i][j - 1]
                rc = ps[j] - ps[i]
                if lb + lc - la >= rb + rc - ra:
                    dp[i][j][0] = lc + lb
                    dp[i][j][1] = la

                else:
                    dp[i][j][0] = rc + rb
                    dp[i][j][1] = ra

        return dp[0][n - 1][0] - dp[0][n - 1][1]


if __name__ == '__main__':
    s = Solution()
    print(s.stoneGameVII(stones=[1, 2, 3]))
    print(s.stoneGameVII(stones=[5, 3, 1, 4, 2]))
    print(s.stoneGameVII(stones=[7, 90, 5, 1, 100, 10, 10, 2]))
    print(s.stoneGameVII(
        [910, 45, 896, 780, 251, 12, 435, 436, 745, 371, 230, 52, 400, 411, 566, 201, 785, 79, 848, 774, 188, 321, 897,
         817, 764, 21, 685, 234, 349, 628, 133, 931, 331, 377, 660, 481, 946, 915, 886, 609, 415, 7, 18, 664, 595, 565,
         917, 489, 423, 859, 799, 582, 402, 198, 855, 198, 679, 153, 818, 686, 814, 161, 553, 87, 552, 738, 671, 115,
         620, 500, 284, 618, 263, 649, 129, 300, 365, 643, 484, 426, 164, 98, 197, 230, 125, 950, 520, 336, 806, 160,
         533, 629, 554, 75, 808, 352, 30, 401, 580, 134, 967, 369, 535, 388, 685, 100, 305, 236, 553, 252, 370, 584,
         261, 277, 813, 185, 815, 498, 586, 836, 203, 834, 406, 571, 688, 111, 632, 324, 598, 316, 670, 912, 822, 352,
         115, 827, 726, 443, 642, 727, 327, 861, 562, 3, 546, 391, 167, 124, 480, 144, 989, 404, 572, 143, 12, 854, 624,
         545, 514, 753, 623, 485, 501, 456, 379, 58, 231, 550, 425, 898, 692, 124, 146, 936, 776, 241, 576, 623, 828,
         853, 562, 336, 187, 608, 269, 934, 390, 918, 209, 806, 29, 427, 310, 166, 460, 156, 400, 738, 507, 807, 870,
         273, 528, 375, 488, 307, 368, 499, 481, 613, 250, 839, 739, 131, 343, 279, 956, 358, 755, 313, 690, 196, 779,
         512, 409, 825, 431, 60, 123, 263, 274, 98, 797, 828, 812, 912, 296, 666, 935, 102, 144, 879, 704, 753, 509,
         629, 402, 422, 620, 238, 20, 352, 424, 819, 491, 3, 124, 134, 82, 400, 881, 814, 106, 179, 491, 381, 827, 671,
         124, 488, 31, 306, 971, 782, 340, 945, 542, 403, 645, 602, 634, 859, 65, 360, 105, 36, 507, 887, 607, 264, 370,
         661, 108, 208, 614, 434, 192, 368, 907, 251, 573, 427, 509, 930, 186, 947, 43, 487, 830, 896, 776, 501, 859,
         598, 29, 571, 976, 822, 45, 786, 47, 554, 46, 258, 156, 363, 883, 515, 480, 420, 751, 17, 467, 14, 416, 860,
         63, 415, 900, 67, 376, 604, 571, 301, 594, 49, 620, 960, 870, 692, 269, 381, 554, 457, 417, 219, 696, 359, 799,
         911, 83, 294, 871, 61, 145, 299, 639, 990, 700, 973, 551, 683, 193, 887, 260, 506, 848, 749, 34, 393, 361, 681,
         334, 355, 891, 294, 834, 563, 178, 533, 808, 216, 868, 101, 97, 27, 47, 110, 684, 13, 420, 312, 870, 886, 213,
         928, 440, 140, 90, 258, 316, 822, 477, 111, 192, 878, 348, 698, 406, 824, 517, 22, 983, 639, 546, 637, 571,
         173, 203, 406, 475, 263, 194, 576, 30, 853, 366, 795, 857, 87, 610, 967, 74, 575, 390, 454, 881, 84, 627, 568,
         164, 205, 899, 822, 98, 110, 362, 495, 823, 494, 986, 629, 415, 680, 898, 518, 962, 850, 211, 8, 273, 952, 999,
         577, 86, 523, 972, 53, 933, 899, 692, 652, 198, 141, 13, 424, 944, 129, 406, 237, 765, 365, 189, 181, 997, 313,
         72, 303, 532, 266, 687, 436, 850, 478, 642, 129, 233, 915, 53, 987, 273, 278, 948, 296, 39, 434, 465, 164, 281,
         903, 238, 708, 792, 415, 412, 878, 128, 726, 461, 32, 380, 34, 103, 677, 298, 937, 322, 359, 811, 541, 363,
         331, 904, 202, 241, 700, 332, 7, 268, 335, 716, 536, 6, 800, 78, 662, 546, 186, 913, 622, 67, 932, 310, 459,
         818, 87, 856, 192, 918, 708, 268, 912, 246, 994, 930, 393, 331, 619, 324, 165, 908, 410, 673, 809, 78, 592,
         179, 694, 516, 2, 233, 422, 3, 769, 522, 938, 274, 978, 244, 740, 728, 824, 322, 873, 941, 207, 517, 672, 669,
         203, 675, 882, 220, 213, 189, 911, 213, 921, 621, 645, 353, 559, 867, 557, 843, 144, 920, 500, 281, 425, 5,
         217, 667, 237, 800, 413, 412, 488, 814, 247, 871, 378, 660, 434, 723, 716, 516, 756, 592, 105, 575, 343, 838,
         703, 878, 470, 527, 284, 768, 390, 764, 533, 773, 339, 763, 962, 361, 373, 251, 510, 553, 919, 882, 346, 509,
         967, 439, 501, 15, 154, 24, 810, 118, 948, 849, 528, 227, 886, 883, 567, 687, 724, 91, 499, 94, 27, 313, 207,
         183, 134, 133, 720, 75, 347, 709, 494, 374, 64, 939, 959, 578, 382, 938, 351, 388, 669, 811, 68, 446, 802, 886,
         637, 540, 301]))
